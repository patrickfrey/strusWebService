#! /bin/sh
#
# Author: Andreas Baumann
#
# /etc/init.d/struswebservice
#
### BEGIN INIT INFO
# Provides:       strus web server
# Required-Start: $network $named $syslog $time
# Should-Start:   
# Required-Stop:  $network $named $syslog $time
# Should-Stop:    
# Default-Start:  3 5
# Default-Stop:
# Description:    start the strus webservice
### END INIT INFO

STRUSWEBSERVICE_BIN=/usr/sbin/strusWebService
test -x $STRUSWEBSERVICE_BIN || exit 5
STRUSWEBSERVICE_PIDFILE=/var/run/strusWebService/strusWebService.pid
STRUSWEBSERVICE_CONFIGFILE=/etc/strusWebService/strusWebService.conf

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
        if [ -e $STRUSWEBSERVICE_PIDFILE ]; then
           $0 status &>/dev/null
           if [ $ret = 1 ]; then
              echo "Warning: found stale pidfile (unclean shutdown?)"
           elif [ $ret = 0 ]; then
              echo "strus webservice is already running ($STRUSWEBSERVICE_PIDFILE)"
              rc_failed $ret
              rc_status -v1
              rc_exit
           fi
        fi

        echo -n "Starting strus webservice"
        STRUSWEBSERVICE_ARGS="-c $STRUSWEBSERVICE_CONFIGFILE"
        ## Start daemon with startproc(8). If this fails
        ## the echo return value is set appropriate.

        # NOTE: startproc return 0, even if service is 
        # already running to match LSB spec.
        startproc -p $STRUSWEBSERVICE_PIDFILE $STRUSWEBSERVICE_BIN $STRUSWEBSERVICE_ARGS

	# Remember status and be verbose
	rc_status -v
        ;;
    stop)
        echo -n "Shutting down strus webservice"

        ## Stop daemon with killproc(8) and if this fails
        ## set echo the echo return value.

	/sbin/killproc -p $STRUSWEBSERVICE_PIDFILE -TERM $STRUSWEBSERVICE_BIN

	# Remember status and be verbose
	rc_status -v
        ;;
    try-restart)
	## Stop the service and if this succeeds (i.e. the 
	## service was running before), start it again.
	## Note: try-restart is not (yet) part of LSB (as of 0.7.5)
	$0 status >/dev/null &&  $0 restart

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
        ;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.

	echo -n "Reload strus webservice"

	# if it supports it:
	#/sbin/killproc -p $STRUSWEBSERVICE_PIDFILE -HUP $STRUSWEBSERVICE_BIN
	#touch /var/run/FOO.pid
	#rc_status -v

	## Otherwise:
	$0 stop  &&  $0 start
	rc_status
	;;
    reload)
        echo -n "Reload strus webservice"

	# If it supports signalling:
	#/sbin/killproc -p $STRUSWEBSERVICE_PIDFILE -HUP $STRUSWEBSERVICE_BIN
	#touch /var/run/FOO.pid
	#rc_status -v
	
	## Otherwise if it does not support reload:
	rc_failed 3
	rc_status -v
        ;;
    status)
        echo -n "Checking for strus webservice: "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Status has a slightly different for the status command:
	# 0 - service running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running

	# NOTE: checkproc returns LSB compliant status values.
        /sbin/checkproc -p $STRUSWEBSERVICE_PIDFILE $STRUSWEBSERVICE_BIN
	rc_status -v
        ;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
        exit 1
        ;;
esac
rc_exit
